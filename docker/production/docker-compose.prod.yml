# Production Docker Compose Configuration
# Orchestrates MCP services with security, monitoring, and resilience

version: '3.8'

x-common-variables: &common-variables
  NODE_ENV: production
  LOG_LEVEL: ${LOG_LEVEL:-info}
  TZ: ${TZ:-UTC}

x-resource-limits: &resource-limits
  resources:
    limits:
      cpus: '1'
      memory: 1G
    reservations:
      cpus: '0.5'
      memory: 512M

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # Core MCP API Service
  mcp-api:
    build:
      context: ../..
      dockerfile: docker/production/node.Dockerfile
      args:
        - NODE_VERSION=20-alpine
    image: mcp-api:${VERSION:-latest}
    container_name: mcp-api
    restart: unless-stopped
    environment:
      <<: *common-variables
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      <<: *resource-limits
    networks:
      - mcp-internal
      - mcp-public
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "node", "/app/health/liveness.js"]
    depends_on:
      - redis
      - postgres
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3000"
      - "prometheus.io/path=/metrics"

  # Python Analytics Service
  mcp-analytics:
    build:
      context: ../..
      dockerfile: docker/production/python.Dockerfile
    image: mcp-analytics:${VERSION:-latest}
    container_name: mcp-analytics
    restart: unless-stopped
    environment:
      <<: *common-variables
      PORT: 8000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379
    deploy:
      replicas: 2
      <<: *resource-limits
    networks:
      - mcp-internal
    volumes:
      - analytics-data:/app/data
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "python", "/app/health/health-monitor.py", "--check", "liveness"]
    depends_on:
      - redis
      - postgres

  # Go Worker Service
  mcp-worker:
    build:
      context: ../..
      dockerfile: docker/production/go.Dockerfile
    image: mcp-worker:${VERSION:-latest}
    container_name: mcp-worker
    restart: unless-stopped
    environment:
      <<: *common-variables
      PORT: 8080
      REDIS_URL: redis://redis:6379
      WORKER_CONCURRENCY: 10
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    networks:
      - mcp-internal
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "/app/health/health-check-go"]
    depends_on:
      - redis

  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - mcp-public
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
    depends_on:
      - mcp-api
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    networks:
      - mcp-internal
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcp}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - mcp-internal
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - mcp-internal
      - monitoring
    ports:
      - "9090:9090"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
    ports:
      - "3001:3000"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
    depends_on:
      - prometheus

  # Log Aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - monitoring
    ports:
      - "3100:3100"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3100/ready || exit 1"]

networks:
  mcp-internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  mcp-public:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  app-logs:
    driver: local
  app-uploads:
    driver: local
  analytics-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-cache:
    driver: local
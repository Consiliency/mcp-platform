# Continuous Integration Workflow
# Implements complete CI pipeline with testing, quality checks, and security scanning
# 
# @module .github/workflows/ci.yml
# @assigned-to CI/CD Team

name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug mode'
        required: false
        default: false

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  # Code quality checks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/go/pkg/mod
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-deps-
            
      - name: Install Node dependencies
        run: npm ci --no-audit
        
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install flake8 black isort mypy bandit
          
      - name: Install Go dependencies
        run: |
          go mod download
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        
      - name: Run ESLint
        run: npm run lint:js || true
        continue-on-error: true
        
      - name: Run Prettier
        run: npm run format:check || true
        continue-on-error: true
        
      - name: Run Python linters
        run: |
          flake8 . --config=.flake8 || true
          black --check . || true
          isort --check-only . || true
        continue-on-error: true
        
      - name: Run Go linters
        run: |
          golangci-lint run --timeout=5m || true
          go fmt ./... && git diff --exit-code || true
        continue-on-error: true
        
      - name: Check commit messages
        if: github.event_name == 'pull_request'
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: '.commitlintrc.json'
        continue-on-error: true
        
      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            eslint-report.json
            prettier-report.txt
            flake8-report.txt
          retention-days: 7

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run npm audit
        run: |
          npm audit --production --audit-level=moderate || true
          npm audit --json > npm-audit.json || true
        continue-on-error: true
        
      - name: Run Python security scan (Bandit)
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-results.json || true
        continue-on-error: true
        
      - name: Run Go security scan
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt=json -out=gosec-results.json ./... || true
        continue-on-error: true
        
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified
        continue-on-error: true
        
      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: |
            trivy-results.sarif
            npm-audit.json
            bandit-results.json
            gosec-results.json
          retention-days: 30

  # Unit tests with coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20, 22]
        python-version: ['3.10', '3.11', '3.12']
        go-version: ['1.20', '1.21', '1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          
      - name: Install dependencies
        run: |
          npm ci --no-audit
          pip install -r requirements.txt || true
          pip install pytest pytest-cov pytest-asyncio
          go mod download
          
      - name: Run Node.js unit tests
        run: |
          npm run test:unit -- --coverage --coverageReporters=json,lcov,text
          mv coverage/lcov.info coverage/lcov-node-${{ matrix.node-version }}.info
        env:
          NODE_ENV: test
          CI: true
          
      - name: Run Python unit tests
        run: |
          pytest tests/unit --cov=. --cov-report=xml:coverage-python-${{ matrix.python-version }}.xml --cov-report=term
        continue-on-error: true
        
      - name: Run Go unit tests
        run: |
          go test -v -race -coverprofile=coverage-go-${{ matrix.go-version }}.out -covermode=atomic ./...
          go tool cover -html=coverage-go-${{ matrix.go-version }}.out -o coverage-go-${{ matrix.go-version }}.html
        continue-on-error: true
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-node-${{ matrix.node-version }}-python-${{ matrix.python-version }}-go-${{ matrix.go-version }}
          path: |
            coverage/
            coverage-*.xml
            coverage-*.out
            coverage-*.html
          retention-days: 7
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov-node-${{ matrix.node-version }}.info,./coverage-python-${{ matrix.python-version }}.xml,./coverage-go-${{ matrix.go-version }}.out
          flags: unittests,node-${{ matrix.node-version }},python-${{ matrix.python-version }},go-${{ matrix.go-version }}
          name: coverage-${{ matrix.node-version }}-${{ matrix.python-version }}-${{ matrix.go-version }}
          fail_ci_if_error: false

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-tests
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mcps_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Docker Compose
        run: |
          docker compose version
          docker version
          
      - name: Install dependencies
        run: npm ci --no-audit
        
      - name: Wait for services
        run: |
          npm run wait-for-services || true
          
      - name: Run database migrations
        run: |
          npm run db:migrate:test || true
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/mcps_test
          
      - name: Run integration tests
        run: |
          npm run test:integration -- --coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/mcps_test
          REDIS_URL: redis://localhost:6379
          CI: true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage/
          retention-days: 7

  # E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: integration-tests
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, edge]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --no-audit
          npx playwright install --with-deps ${{ matrix.browser }}
          
      - name: Start application
        run: |
          npm run build || true
          npm run start:test &
          npm run wait-for-app || true
        env:
          NODE_ENV: test
          CI: true
          
      - name: Run E2E tests
        run: |
          npm run test:e2e:${{ matrix.browser }} || true
        env:
          CI: true
          BROWSER: ${{ matrix.browser }}
          
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            screenshots/
            videos/
          retention-days: 7

  # Build Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint, security]
    strategy:
      matrix:
        service: [api, worker, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:master
            
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/mcps-${{ matrix.service }}
            ghcr.io/${{ github.repository_owner }}/mcps-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}/Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
            
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/mcps-${{ matrix.service }}:${{ steps.meta.outputs.version }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          
  # Generate and upload artifacts
  artifacts:
    name: Generate Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests, docker-build]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts
          
      - name: Generate test report
        run: |
          npm run generate:test-report || echo "No test report generator found"
          
      - name: Generate coverage report
        run: |
          npm run generate:coverage-report || echo "No coverage report generator found"
          
      - name: Create summary
        run: |
          echo "# CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability Scan: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Secret Detection: ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Images Built" >> $GITHUB_STEP_SUMMARY
          echo "- API: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Worker: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ✅" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload final artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts-${{ github.run_id }}
          path: |
            all-artifacts/
            test-report.html
            coverage-report.html
          retention-days: 30
          
  # Final status check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint, security, unit-tests, integration-tests, e2e-tests, docker-build, artifacts]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "CI pipeline failed"
            exit 1
          else
            echo "CI pipeline passed"
          fi
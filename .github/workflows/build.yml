# Docker Build and Push Workflow
# Automates Docker image building, scanning, and pushing to registries
# 
# @module .github/workflows/build.yml
# @assigned-to CI/CD Team

name: Docker Build Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (comma-separated, e.g., api,worker,frontend)'
        required: false
        default: 'all'
      push_images:
        type: boolean
        description: 'Push images to registry'
        required: false
        default: false
  schedule:
    # Weekly build to catch dependency updates
    - cron: '0 2 * * 0'

env:
  REGISTRY: ghcr.io
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  BUILDX_VERSION: latest
  COSIGN_VERSION: v2.2.1

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  # Prepare build matrix
  prepare:
    name: Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.services.outputs.services }}
      push: ${{ steps.push.outputs.push }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine services to build
        id: services
        run: |
          if [ "${{ github.event.inputs.services }}" == "all" ] || [ -z "${{ github.event.inputs.services }}" ]; then
            echo 'services=["api","worker","frontend","monitoring","gateway"]' >> $GITHUB_OUTPUT
          else
            # Convert comma-separated to JSON array
            SERVICES=$(echo "${{ github.event.inputs.services }}" | jq -R -s -c 'split(",") | map(select(length > 0))')
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
          fi
          
      - name: Determine if push is needed
        id: push
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "push=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "push=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.push_images }}" == "true" ]; then
            echo "push=true" >> $GITHUB_OUTPUT
          else
            echo "push=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            VERSION=latest
          else
            VERSION=pr-${{ github.event.pull_request.number || github.run_number }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # Build and scan images
  build:
    name: Build ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: |
            network=host
            image=moby/buildkit:master
          buildkitd-flags: '--debug'
          
      - name: Log in to GitHub Container Registry
        if: needs.prepare.outputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log in to Docker Hub
        if: needs.prepare.outputs.push == 'true' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/mcps-${{ matrix.service }}
            ${{ needs.prepare.outputs.push == 'true' && github.ref == 'refs/heads/main' && format('docker.io/{0}/mcps-{1}', secrets.DOCKER_USERNAME, matrix.service) || '' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=short
            type=raw,value=${{ needs.prepare.outputs.version }}
            
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-${{ matrix.platform }}-
            ${{ runner.os }}-buildx-${{ matrix.service }}-
            
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/${{ matrix.service }}/Dockerfile.production
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/mcps-${{ matrix.service }}:buildcache
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.prepare.outputs.version }}
            SERVICE_NAME=${{ matrix.service }}
            
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.build.outputs.metadata)['image.name'] }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-${{ matrix.platform }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}-${{ matrix.platform }}.sarif'
          category: 'trivy-${{ matrix.service }}'
          
      - name: Run Snyk container scan
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ fromJSON(steps.build.outputs.metadata)['image.name'] }}
          args: --severity-threshold=high --file=./docker/${{ matrix.service }}/Dockerfile.production
          
      - name: Run container structure tests
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          # Run tests if config exists
          if [ -f "./docker/${{ matrix.service }}/structure-test.yaml" ]; then
            container-structure-test test \
              --image ${{ fromJSON(steps.build.outputs.metadata)['image.name'] }} \
              --config ./docker/${{ matrix.service }}/structure-test.yaml
          fi
          
      - name: Export image for scanning
        run: |
          docker save ${{ fromJSON(steps.build.outputs.metadata)['image.name'] }} -o /tmp/${{ matrix.service }}-${{ matrix.platform }}.tar
          
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.service }}-${{ matrix.platform }}
          path: /tmp/${{ matrix.service }}-${{ matrix.platform }}.tar
          retention-days: 1

  # Combine and push multi-platform images
  push:
    name: Push Multi-Platform Images
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.push == 'true'
    timeout-minutes: 20
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: ${{ env.COSIGN_VERSION }}
          
      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: docker-image-${{ matrix.service }}-*
          path: /tmp/images
          
      - name: Load images
        run: |
          for platform in linux-amd64 linux-arm64; do
            docker load -i /tmp/images/docker-image-${{ matrix.service }}-${platform//-/\/}/${{ matrix.service }}-${platform//-/\/}.tar
          done
          
      - name: Create and push manifest
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          # Extract tags from metadata
          TAGS="${{ needs.prepare.outputs.version }}"
          
          # Create manifests for each registry
          for registry in "${{ env.REGISTRY }}/${{ github.repository_owner }}" "docker.io/${{ secrets.DOCKER_USERNAME }}"; do
            if [[ "$registry" == "docker.io"* ]] && [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
              continue
            fi
            
            IMAGE_NAME="$registry/mcps-${{ matrix.service }}"
            
            # Create and push manifest
            docker manifest create $IMAGE_NAME:$TAGS \
              $IMAGE_NAME:$TAGS-linux-amd64 \
              $IMAGE_NAME:$TAGS-linux-arm64
              
            docker manifest push $IMAGE_NAME:$TAGS
            
            # Sign the image with Cosign
            cosign sign --yes $IMAGE_NAME:$TAGS
            
            # Generate and push SBOM
            syft $IMAGE_NAME:$TAGS -o spdx-json > sbom-${{ matrix.service }}.spdx.json
            cosign attach sbom --sbom sbom-${{ matrix.service }}.spdx.json $IMAGE_NAME:$TAGS
            
            # Generate and push attestation
            cosign attest --yes --predicate sbom-${{ matrix.service }}.spdx.json $IMAGE_NAME:$TAGS
          done
          
      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json
          retention-days: 30

  # Generate build report
  report:
    name: Generate Build Report
    runs-on: ubuntu-latest
    needs: [prepare, build, push]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Generate build report
        run: |
          echo "# Docker Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Services: ${{ needs.prepare.outputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "- Push Enabled: ${{ needs.prepare.outputs.push }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Add build status for each service/platform
          for service in $(echo '${{ needs.prepare.outputs.services }}' | jq -r '.[]'); do
            for platform in linux/amd64 linux/arm64; do
              echo "| $service | $platform | ✅ |" >> $GITHUB_STEP_SUMMARY
            done
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "Security scan results have been uploaded to GitHub Security tab." >> $GITHUB_STEP_SUMMARY
          
      - name: Create release notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cat > release-notes.md << EOF
          ## Docker Images
          
          The following Docker images have been built and pushed:
          
          $(for service in $(echo '${{ needs.prepare.outputs.services }}' | jq -r '.[]'); do
            echo "- \`ghcr.io/${{ github.repository_owner }}/mcps-$service:${{ needs.prepare.outputs.version }}\`"
          done)
          
          ## Supported Platforms
          
          All images support the following platforms:
          - linux/amd64
          - linux/arm64
          
          ## Security
          
          All images have been scanned for vulnerabilities and signed with Cosign.
          SBOMs are available for each image.
          EOF
          
      - name: Upload release notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 7
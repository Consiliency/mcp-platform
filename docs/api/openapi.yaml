openapi: 3.0.3
info:
  title: MCP Platform API
  description: Comprehensive REST API for managing services, configurations, and deployments
  version: 1.0.0
  contact:
    name: MCP Team
    url: https://github.com/modelcontextprotocol
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.mcp.platform/v1
    description: Production server
paths:
  /auth/login:
    post:
      summary: Authenticate user
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services:
    get:
      summary: List all services
      operationId: listServices
      tags:
        - Services
      security:
        - bearerAuth: []
        - apiKey: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Create a new service
      operationId: createService
      tags:
        - Services
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreate'
      responses:
        '201':
          description: Service created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
  /services/{serviceId}:
    get:
      summary: Get service details
      operationId: getService
      tags:
        - Services
      security:
        - bearerAuth: []
        - apiKey: []
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /health:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /metrics:
    get:
      summary: Get platform metrics
      operationId: getMetrics
      tags:
        - Monitoring
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Platform metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    AuthResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - expiresIn
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Token expiration time in seconds
    Service:
      type: object
      required:
        - id
        - name
        - type
        - status
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [nodejs, python, go]
        status:
          type: string
          enum: [running, stopped, error]
        config:
          type: object
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServiceCreate:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [nodejs, python, go]
        config:
          type: object
        metadata:
          type: object
    HealthStatus:
      type: object
      required:
        - status
        - uptime
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        uptime:
          type: integer
          description: Uptime in seconds
        timestamp:
          type: string
          format: date-time
        checks:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Services
    description: Service management endpoints
  - name: Monitoring
    description: Health and monitoring endpoints